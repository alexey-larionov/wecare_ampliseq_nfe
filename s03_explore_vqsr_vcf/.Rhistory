rm(list=ls())
graphics.off()
library(knitr)
library(vcfR) # for reading VCF
library(stringr) # for word (for VEP parsing)
library(tidyr) # for separate (for VEP parsing)
library(dplyr) # for renaming AC, AN and AF
base_folder="/Users/alexey/Documents/wecare/ampliseq/analysis4/s03_explore_vqsr_vcf"
setwd(base_folder)
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Chunk 3: read_vcfr
# Source VCF
vcf_file=paste(base_folder, "ampliseq_nfe_vqsr.vcf", sep="/")
# Read vcf to vcfR object
vcfr <- read.vcfR(vcf_file)
# Clean-up
rm(vcf_file)
# Chunk 4: extract_meta_and_fixed
# Get data from header and fixed columns
meta_fix <- vcfR2tidy(vcfr, info_only=T)
# Get data frame with meta-information from vcf header
meta.df <- meta_fix$meta
dim(meta.df)
meta.df
# Get data frame with fixed columns (including parsed INFO, convert tibble to data-frame)
fixed.df <- as.data.frame(meta_fix$fix)
dim(fixed.df)
colnames(fixed.df)
fixed.df[1:5,1:7]
# Clean-up
rm(meta_fix)
# Chunk 5: check_blanks
# Count missed values
sum(is.na(fixed.df))
sum(fixed.df == "", na.rm=T)
sum(fixed.df == ".", na.rm=T)
# Function to check for blanks in a vector
sum_na.udf <- function(x){sum(is.na(x))}
# Look up columns that contain blanks
x <- apply(fixed.df,2,sum_na.udf)
names(x) <- colnames(fixed.df)
x[x>0]
# Clean-up
rm(x, sum_na.udf)
# Genotypes matrix with numeric representation of alleles
gt_num.mx <- extract.gt(vcfr) # original numeric codes: 0/1, 1/1 etc
dim(gt_num.mx)
gt_num.mx[1:5,6:10]
sum(is.na(gt_num.mx))
sum(!is.na(gt_num.mx))
sum(is.na(gt_num.mx))/sum(!is.na(gt_num.mx))
# Genotypes matrix with alleles coded as ACGT
gt_chr.mx <- extract.gt(vcfr, return.alleles = TRUE) # encoded as A/A, T/G etc
dim(gt_chr.mx)
gt_chr.mx[1:5,6:10]
NA -> gt_chr.mx[gt_chr.mx=="."]
gt_chr.mx[1:5,6:10]
# dp
dp.mx <- extract.gt(vcfr, element = "DP", as.numeric = TRUE)
dim(dp.mx)
dp.mx[1:5,6:10]
# gq
gq.mx <- extract.gt(vcfr, element = "GQ", as.numeric = TRUE)
dim(gq.mx)
gq.mx[1:5,6:10]
# ad
ad.mx <- extract.gt(vcfr, element = "AD")
dim(ad.mx)
ad.mx[1:5,6:10]
# Clean-up
rm(vcfr)
summary(as.factor(gt_num.mx))
gt_add.mx <- gt_num.mx
0 -> gt_add.mx[ gt_num.mx == "0/0" ]
1 -> gt_add.mx[ gt_num.mx == "1/0" ]
1 -> gt_add.mx[ gt_num.mx == "0/1" ]
2 -> gt_add.mx[ gt_num.mx == "1/1" ]
summary(as.factor(gt_add.mx))
gt_add.mx[1:5,6:10]
View(fixed.df)
# Chunk 1: set_width
# eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(vcfR) # for reading VCF
library(stringr) # for word (for VEP parsing)
library(tidyr) # for separate (for VEP parsing)
library(dplyr) # for renaming AC, AN and AF
base_folder="/Users/alexey/Documents/wecare/ampliseq/analysis4/s03_explore_vqsr_vcf"
setwd(base_folder)
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Chunk 3: read_vcfr
# Source VCF
vcf_file=paste(base_folder, "ampliseq_nfe_vqsr.vcf", sep="/")
# Read vcf to vcfR object
vcfr <- read.vcfR(vcf_file)
# Clean-up
rm(vcf_file)
# Chunk 4: extract_meta_and_fixed
# Get data from header and fixed columns
meta_fix <- vcfR2tidy(vcfr, info_only=T)
# Get data frame with meta-information from vcf header
meta.df <- meta_fix$meta
dim(meta.df)
meta.df
# Get data frame with fixed columns (including parsed INFO, convert tibble to data-frame)
fixed.df <- as.data.frame(meta_fix$fix)
dim(fixed.df)
colnames(fixed.df)
fixed.df[1:5,1:7]
# Clean-up
rm(meta_fix)
# Chunk 5: extract_matrices
# Genotypes matrix with numeric representation of alleles
gt_num.mx <- extract.gt(vcfr) # original numeric codes: 0/1, 1/1 etc
dim(gt_num.mx)
gt_num.mx[1:5,6:10]
sum(is.na(gt_num.mx))
sum(!is.na(gt_num.mx))
sum(is.na(gt_num.mx))/sum(!is.na(gt_num.mx))
# Clean-up
rm(vcfr)
# Count missed values
sum(is.na(fixed.df))
sum(fixed.df == "", na.rm=T)
sum(fixed.df == ".", na.rm=T)
# Function to check for blanks in a vector
sum_na.udf <- function(x){sum(is.na(x))}
# Look up columns that contain blanks
x <- apply(fixed.df,2,sum_na.udf)
names(x) <- colnames(fixed.df)
x[x>0]
fixed.df <- fixed.df %>%
select(-ID, -END, -HaplotypeScore, -VQSLOD, -culprit)
table(fixed.df$DS)
View(meta.df)
# Chunk 1: set_width
# eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(vcfR) # for reading VCF
library(stringr) # for word (for VEP parsing)
library(tidyr) # for separate (for VEP parsing)
library(dplyr) # for renaming AC, AN and AF
base_folder="/Users/alexey/Documents/wecare/ampliseq/analysis4/s03_explore_vqsr_vcf"
setwd(base_folder)
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Chunk 3: read_vcfr
# Source VCF
vcf_file=paste(base_folder, "ampliseq_nfe_vqsr.vcf", sep="/")
# Read vcf to vcfR object
vcfr <- read.vcfR(vcf_file)
# Clean-up
rm(vcf_file)
# Chunk 4: extract_meta_and_fixed
# Get data from header and fixed columns
meta_fix <- vcfR2tidy(vcfr, info_only=T)
# Get data frame with meta-information from vcf header
meta.df <- meta_fix$meta
dim(meta.df)
meta.df
# Get data frame with fixed columns (including parsed INFO, convert tibble to data-frame)
fixed.df <- as.data.frame(meta_fix$fix)
dim(fixed.df)
colnames(fixed.df)
fixed.df[1:5,1:7]
# Clean-up
rm(meta_fix)
# Chunk 5: extract_matrices
# Genotypes matrix with numeric representation of alleles
gt_num.mx <- extract.gt(vcfr) # original numeric codes: 0/1, 1/1 etc
dim(gt_num.mx)
gt_num.mx[1:5,6:10]
sum(is.na(gt_num.mx))
sum(!is.na(gt_num.mx))
sum(is.na(gt_num.mx))/sum(!is.na(gt_num.mx))
# Clean-up
rm(vcfr)
# Chunk 6: check_blanks
# Count missed values
sum(is.na(fixed.df))
sum(fixed.df == "", na.rm=T)
sum(fixed.df == ".", na.rm=T)
# Function to check for blanks in a vector
sum_na.udf <- function(x){sum(is.na(x))}
# Look up columns that contain blanks
x <- apply(fixed.df,2,sum_na.udf)
names(x) <- colnames(fixed.df)
x[x>0]
# A uniform field (Were any of the samples downsampled?)
table(fixed.df$DS)
# Remove empty and uniform fields
fixed.df <- fixed.df %>%
select(-ID, -END, -HaplotypeScore, -VQSLOD, -culprit, -DS)
# Clean-up
rm(x, sum_na.udf)
View(gt_num.mx)
head(colnames(gt_num.mx))
tail(colnames(gt_num.mx))
colnames(gt_num.mx)[520:550]
colnames(gt_num.mx)[539:540]
colnames(gt_num.mx)[540:541]
colnames(gt_num.mx)[541:542]
gt_ampliseq.df <- gt_num.mx[,1:541]
dim(gt_num.mx)
gt_ampliseq.df <- gt_num.mx[,1:541]
gt_nfe.df <- gt_num.mx[,542:739]
sum(is.na(gt_ampliseq.df)/length(gt_ampliseq.df))
sum(is.na(gt_nfe.df)/length(gt_nfe.df))
sum(is.na(gt_ampliseq.df)/(nrow(gt_ampliseq.df)*ncol(gt_ampliseq.df))
sum(is.na(gt_ampliseq.df)/(nrow(gt_ampliseq.df)*ncol(gt_ampliseq.df)))
hist(fixed.df$QUAL)
hist(fixed.df$QUAL[fixed.df$QUAL<1000])
hist(fixed.df$QUAL[fixed.df$QUAL<10000])
hist(fixed.df$QUAL[fixed.df$QUAL<100000])
hist(fixed.df$QUAL[fixed.df$QUAL<100])
hist(fixed.df$QUAL[fixed.df$QUAL<1000])
hist(fixed.df$QUAL[fixed.df$QUAL<100])
hist(fixed.df$QUAL[fixed.df$QUAL<100], lab=T)
hist(fixed.df$QUAL[fixed.df$QUAL<100], lab=T, ylim=c(0,800))
sum(fixed.df$QUAL < 150)/length(fixed.df$QUAL)
hist(fixed.df$DP)
hist(fixed.df$DP[fixed.df$DP<1000])
hist(fixed.df$DP[fixed.df$DP<10000])
hist(fixed.df$DP[fixed.df$DP<100000])
dim(gt_num.mx)
sum(fixed.df$DP < 7390)/length(fixed.df$DP)
hist(fixed.df$AS_VQSLOD)
hist(as.numeric(fixed.df$AS_VQSLOD))
vqslod <- as.numeric(fixed.df$AS_VQSLOD)
sum(is.na(fixed.df$AS_VQSLOD))
vqslod <- as.numeric(fixed.df$AS_VQSLOD)
sum(is.na(vqslod))
hist(vqslod)
hist(vqslod[vqslod > -100])
hist(vqslod[vqslod > -30])
hist(vqslod[vqslod > -25])
max(vqslod)
max(vqslod, na.rm=T)
hist(vqslod[vqslod > -25], breaks=100)
sum(fixed.df$DP < 7390)/length(fixed.df$DP)
max(vqslod[fixed.df$FILTER="PASS"], na.rm=T)
max(vqslod[fixed.df$FILTER=="PASS"], na.rm=T)
min(vqslod[fixed.df$FILTER=="PASS"], na.rm=T)
abline(v=0.9, col="Red")
hist(vqslod[vqslod > -25], breaks=100)
min(vqslod[fixed.df$FILTER=="PASS"], na.rm=T)
max(vqslod[fixed.df$FILTER=="PASS"], na.rm=T)
abline(v=0.9, col="Red", lty=2)
rm(gt_ampliseq.df, gt_nfe.df)
rm(vqslod)
dim(gt_num.mx)
table(fixed.df$FILTER)
sum((fixed.df$FILTER=="PASS"))/length(fixed.df$FILTER)
sum(fixed.df$DP < 7390)/length(fixed.df$DP)
sum(fixed.df$DP < 7390 & fixed.df$FILTER=="PASS" )/length(fixed.df$DP)
sum(fixed.df$DP >= 7390 & fixed.df$FILTER=="PASS" )/length(fixed.df$DP)
sum(fixed.df$DP >= 7390 & fixed.df$FILTER=="PASS" )
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(vcfR) # for reading VCF
base_folder="/Users/alexey/Documents/wecare/ampliseq/analysis4/s03_explore_vqsr_vcf"
setwd(base_folder)
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Source VCF
vcf_file=paste(base_folder, "wes_nfe_panel_vqsr.vcf", sep="/")
# Read vcf to vcfR object
vcfr <- read.vcfR(vcf_file)
# Clean-up
rm(vcf_file)
# Get data from header and fixed columns
meta_fix <- vcfR2tidy(vcfr, info_only=T)
# Get data frame with meta-information from vcf header
meta.df <- meta_fix$meta
dim(meta.df)
meta.df
# Get data frame with fixed columns (including parsed INFO, convert tibble to data-frame)
fixed.df <- as.data.frame(meta_fix$fix)
dim(fixed.df)
colnames(fixed.df)
fixed.df[1:5,1:7]
# Clean-up
rm(meta_fix)
# Genotypes matrix with numeric representation of alleles
gt_num.mx <- extract.gt(vcfr) # original numeric codes: 0/1, 1/1 etc
dim(gt_num.mx)
gt_num.mx[1:5,6:10]
sum(is.na(gt_num.mx))
sum(!is.na(gt_num.mx))
sum(is.na(gt_num.mx))/sum(!is.na(gt_num.mx))
# Clean-up
rm(vcfr)
# Count missed values
sum(is.na(fixed.df))
sum(fixed.df == "", na.rm=T)
sum(fixed.df == ".", na.rm=T)
# Function to check for blanks in a vector
sum_na.udf <- function(x){sum(is.na(x))}
# Look up columns that contain blanks
x <- apply(fixed.df,2,sum_na.udf)
names(x) <- colnames(fixed.df)
x[x>0]
# A uniform field (Were any of the samples downsampled?)
table(fixed.df$DS)
# Remove empty and uniform fields
fixed.df <- fixed.df %>%
select(-ID, -END, -HaplotypeScore, -VQSLOD, -culprit, -DS)
library(dplyr)
# Remove empty and uniform fields
fixed.df <- fixed.df %>%
select(-ID, -END, -HaplotypeScore, -VQSLOD, -culprit, -DS)
# Clean-up
rm(x, sum_na.udf)
head(colnames(gt_num.mx))
tail(colnames(gt_num.mx))
colnames(gt_num.mx)[541:542]
colnames(gt_num.mx)[530:550]
colnames(gt_num.mx)[550:570]
colnames(gt_num.mx)[520:530]
colnames(gt_num.mx)[510:520]
colnames(gt_num.mx)[500:510]
colnames(gt_num.mx)[490:500]
colnames(gt_num.mx)[480:500]
colnames(gt_num.mx)[480:481]
dim(gt_num.mx)
colnames(gt_num.mx)[470:481]
colnames(gt_num.mx)[450:481]
colnames(gt_num.mx)[420:481]
colnames(gt_num.mx)[400:481]
colnames(gt_num.mx)[197:198]
colnames(gt_num.mx)[199:200]
colnames(gt_num.mx)[198:199]
dim(gt_num.mx)
head(colnames(gt_num.mx))
tail(colnames(gt_num.mx))
colnames(gt_num.mx)[198:199]
dim(gt_num.mx)
gt_nfe.df <- gt_num.mx[,1:198]
gt_wes.df <- gt_num.mx[,199:710]
sum(is.na(gt_wes.df)/(nrow(gt_wes.df)*ncol(gt_wes.df))) # length(gt_ampliseq.df) could be used
sum(is.na(gt_nfe.df)/length(gt_nfe.df))
rm(gt_wes.df, gt_nfe.df)
table(fixed.df$FILTER)
sum((fixed.df$FILTER=="PASS"))/length(fixed.df$FILTER)
hist(fixed.df$QUAL)
hist(fixed.df$QUAL[fixed.df$QUAL<1000])
hist(fixed.df$QUAL[fixed.df$QUAL<100], lab=T, ylim=c(0,800))
hist(fixed.df$QUAL[fixed.df$QUAL<200], lab=T, ylim=c(0,200))
hist(fixed.df$QUAL[fixed.df$QUAL<200], lab=T, ylim=c(0,120))
sum(fixed.df$QUAL < 150)/length(fixed.df$QUAL)
hist(fixed.df$DP)
hist(fixed.df$DP[fixed.df$DP<100000])
sum(fixed.df$DP < 7100)/length(fixed.df$DP)
sum(fixed.df$DP >= 7100 & fixed.df$FILTER=="PASS" )/length(fixed.df$DP)
sum(fixed.df$DP >= 7100 & fixed.df$FILTER=="PASS" )
sum(fixed.df$DP >= 7100 & fixed.df$FILTER=="PASS" & fixed.df$QUAL < 150)
sum(fixed.df$DP >= 7100 & fixed.df$FILTER=="PASS" & fixed.df$QUAL > 150)
sum(is.na(fixed.df$AS_VQSLOD))
vqslod <- as.numeric(fixed.df$AS_VQSLOD)
sum(is.na(vqslod))
hist(vqslod)
max(vqslod, na.rm=T)
hist(vqslod[vqslod > -25], breaks=100)
hist(vqslod[vqslod > -25 & vqslod < 25], breaks=100)
min(vqslod[fixed.df$FILTER=="PASS"], na.rm=T)
max(vqslod[fixed.df$FILTER=="PASS"], na.rm=T)
abline(v=0.1, col="Red", lty=2)
rm(vqslod)
hist(vqslod[vqslod > -25 & vqslod < 35], breaks=100)
sum(is.na(fixed.df$AS_VQSLOD))
vqslod <- as.numeric(fixed.df$AS_VQSLOD)
sum(is.na(vqslod))
hist(vqslod)
max(vqslod, na.rm=T)
hist(vqslod[vqslod > -25 & vqslod < 35], breaks=100)
hist(vqslod[vqslod > -25 & vqslod < 50], breaks=100)
hist(vqslod[vqslod > -25 & vqslod < 100], breaks=100)
hist(vqslod[vqslod > -25 & vqslod < 35], breaks=100)
hist(vqslod[vqslod > -25 & vqslod < 25], breaks=100)
min(vqslod[fixed.df$FILTER=="PASS"], na.rm=T)
max(vqslod[fixed.df$FILTER=="PASS"], na.rm=T)
abline(v=0.1, col="Red", lty=2)
rm(vqslod)
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(vcfR) # for reading VCF
library(stringr) # for word (for VEP parsing)
library(tidyr) # for separate (for VEP parsing)
library(dplyr) # for renaming AC, AN and AF
base_folder="/Users/alexey/Documents/wecare/ampliseq/analysis4/s03_explore_vqsr_vcf"
setwd(base_folder)
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Source VCF
vcf_file=paste(base_folder, "ampliseq_nfe_vqsr.vcf", sep="/")
# Read vcf to vcfR object
vcfr <- read.vcfR(vcf_file)
# Clean-up
rm(vcf_file)
# Get data from header and fixed columns
meta_fix <- vcfR2tidy(vcfr, info_only=T)
# Get data frame with meta-information from vcf header
meta.df <- meta_fix$meta
dim(meta.df)
meta.df
# Get data frame with fixed columns (including parsed INFO, convert tibble to data-frame)
fixed.df <- as.data.frame(meta_fix$fix)
dim(fixed.df)
colnames(fixed.df)
fixed.df[1:5,1:7]
# Clean-up
rm(meta_fix)
# Genotypes matrix with numeric representation of alleles
gt_num.mx <- extract.gt(vcfr) # original numeric codes: 0/1, 1/1 etc
dim(gt_num.mx)
gt_num.mx[1:5,6:10]
sum(is.na(gt_num.mx))
sum(!is.na(gt_num.mx))
sum(is.na(gt_num.mx))/sum(!is.na(gt_num.mx))
# Clean-up
rm(vcfr)
# Count missed values
sum(is.na(fixed.df))
sum(fixed.df == "", na.rm=T)
sum(fixed.df == ".", na.rm=T)
# Function to check for blanks in a vector
sum_na.udf <- function(x){sum(is.na(x))}
# Look up columns that contain blanks
x <- apply(fixed.df,2,sum_na.udf)
names(x) <- colnames(fixed.df)
x[x>0]
# A uniform field (Were any of the samples downsampled?)
table(fixed.df$DS)
# Remove empty and uniform fields
fixed.df <- fixed.df %>%
select(-ID, -END, -HaplotypeScore, -VQSLOD, -culprit, -DS)
# Clean-up
rm(x, sum_na.udf)
head(colnames(gt_num.mx))
tail(colnames(gt_num.mx))
colnames(gt_num.mx)[541:542]
dim(gt_num.mx)
gt_ampliseq.df <- gt_num.mx[,1:541]
gt_nfe.df <- gt_num.mx[,542:739]
sum(is.na(gt_ampliseq.df)/(nrow(gt_ampliseq.df)*ncol(gt_ampliseq.df))) # length(gt_ampliseq.df) could be used
sum(is.na(gt_nfe.df)/length(gt_nfe.df))
rm(gt_ampliseq.df, gt_nfe.df)
table(fixed.df$FILTER)
sum((fixed.df$FILTER=="PASS"))/length(fixed.df$FILTER)
hist(fixed.df$QUAL)
hist(fixed.df$QUAL[fixed.df$QUAL<1000])
hist(fixed.df$QUAL[fixed.df$QUAL<100], lab=T, ylim=c(0,800))
sum(fixed.df$QUAL < 150)/length(fixed.df$QUAL)
hist(fixed.df$QUAL[fixed.df$QUAL<200], lab=T, ylim=c(0,800))
hist(fixed.df$QUAL[fixed.df$QUAL<200], lab=T, ylim=c(0,1000))
hist(fixed.df$QUAL[fixed.df$QUAL<200], lab=T, ylim=c(0,1200))
hist(fixed.df$QUAL[fixed.df$QUAL<200], lab=T, ylim=c(0,1500))
sum(fixed.df$QUAL < 150)/length(fixed.df$QUAL)
hist(fixed.df$DP)
hist(fixed.df$DP[fixed.df$DP<100000])
max(fixed.df$DP)
sum(fixed.df$DP > 100000 & fixed.df$FILTER=="PASS" )/length(fixed.df$DP)
sum(fixed.df$DP > 100000 & fixed.df$FILTER=="PASS" )
sum(fixed.df$DP >= 7390 & fixed.df$FILTER=="PASS" & fixed.df$DP < 100000)
