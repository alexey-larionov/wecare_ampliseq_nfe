ac_prop_trend <- c(cur_var$nfe_AC,
cur_var$ubc_AC,
cur_var$cbc_AC)
an_prop_trend <- c(cur_var$nfe_AN,
cur_var$ubc_AN,
cur_var$cbc_AN)
prop_trend_p <- prop.trend.test(ac_prop_trend, an_prop_trend)$p.value
# Trend call
crude_trend_direction <- "None"
if(cur_var$nfe_AF < cur_var$cbc_AF) crude_trend_direction <- "Risk"
if(cur_var$nfe_AF > cur_var$cbc_AF) crude_trend_direction <- "Protective"
result <- c(cur_var$SplitVarID,
nfe_bc_fisher_p, cbc_ubc_fisher_p, prop_trend_p, crude_trend_direction)
# Record to result matrix
crude_stats.mx <- rbind(crude_stats.mx, result)
# Clean-up
rm(cur_var,
fisher_nfe_bc.mx, fisher_cbc_ubc.mx, ac_prop_trend, an_prop_trend,
nfe_bc_fisher_p, cbc_ubc_fisher_p, prop_trend_p, crude_trend_direction, result)
}
# Check result
dim(crude_stats.mx)
# Add rownames
crude_stats.mx[,"SplitVarID"] -> rownames(crude_stats.mx)
# Clean-up
rm(header, v)
# Chunk 6: convert_stats_to_df
crude_stats.df <- as.data.frame(crude_stats.mx, stringsAsFactors = FALSE)
str(crude_stats.df)
crude_stats.df$nfe_bc_fisher_p <- as.numeric(crude_stats.df$nfe_bc_fisher_p)
crude_stats.df$ubc_cbc_fisher_p <- as.numeric(crude_stats.df$ubc_cbc_fisher_p)
crude_stats.df$prop_trend_p <- as.numeric(crude_stats.df$prop_trend_p)
# Check result
str(crude_stats.df)
# Clean-up
rm(crude_stats.mx)
# Chunk 7: add_fdrs
nfe_bc_fisher_fdr <- p.adjust(crude_stats.df$nfe_bc_fisher_p, method="fdr")
min(nfe_bc_fisher_fdr)
ubc_cbc_fisher_fdr <- p.adjust(crude_stats.df$ubc_cbc_fisher_p, method="fdr")
min(ubc_cbc_fisher_fdr)
prop_trend_fdr <- p.adjust(crude_stats.df$prop_trend_p, method="fdr")
min(prop_trend_fdr)
crude_stats.df <- data.frame(crude_stats.df,
nfe_bc_fisher_fdr,
ubc_cbc_fisher_fdr,
prop_trend_fdr)
# Clean-up
rm(nfe_bc_fisher_fdr,ubc_cbc_fisher_fdr,prop_trend_fdr)
# Chunk 8: add_results_to_var_table
sum(variants.df$SplitVarID != crude_stats.df$SplitVarID)
crude_stats.df <- crude_stats.df[,-1]
variants.df <- data.frame(variants.df,crude_stats.df)
rm(crude_stats.df)
# Chunk 9: explore_raw_stats
table(variants.df[,"crude_trend_direction"])
variants.df %>%
filter(prop_trend_fdr <= 0.05) %>%
select(SplitVarID, SYMBOL, Consequence, CLIN_SIG, crude_trend_direction, nfe_AF, ubc_AF, cbc_AF,
nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr)
# Chunk 10: p-values_against_each_other
# Plot different p-values against each other
plot(variants.df$nfe_bc_fisher_p, variants.df$ubc_cbc_fisher_p)
plot(variants.df$nfe_bc_fisher_p, variants.df$prop_trend_p)
plot(variants.df$ubc_cbc_fisher_p, variants.df$prop_trend_p)
# Chunk 11: risk_candidates
# Top "BC risk" candidates
variants.df %>%
filter(crude_trend_direction=="Risk", nfe_bc_fisher_p < 0.05) %>%
select(SplitVarID, SYMBOL, Consequence, CLIN_SIG,
nfe_AF, ubc_AF, cbc_AF, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(nfe_bc_fisher_p)
a <- variants.df %>% filter(crude_trend_direction=="Risk", nfe_bc_fisher_p < 0.05) %>% select(SplitVarID)
# Top "CBC risk" candidates
variants.df %>%
filter(crude_trend_direction=="Risk", ubc_cbc_fisher_p < 0.05) %>%
select(SplitVarID, SYMBOL, Consequence, CLIN_SIG,
nfe_AF, ubc_AF, cbc_AF, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(ubc_cbc_fisher_p)
b <- variants.df %>% filter(crude_trend_direction=="Risk", ubc_cbc_fisher_p < 0.05) %>% select(SplitVarID)
# Top "trend risk" candidates
variants.df %>%
filter(crude_trend_direction=="Risk", prop_trend_p < 0.05) %>%
select(SplitVarID, SYMBOL, Consequence, CLIN_SIG,
nfe_AF, ubc_AF, cbc_AF, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(prop_trend_p)
c <- variants.df %>% filter(crude_trend_direction=="Risk", prop_trend_p < 0.05) %>% select(SplitVarID)
# Intersects
intersect(a,b)
intersect(b,c)
intersect(a,c)
# Clean-up
rm(a,b,c)
# Chunk 12: protective_candidates
# Top "BC protective" candidates
variants.df %>%
filter(crude_trend_direction=="Protective", nfe_bc_fisher_p < 0.05) %>%
select(SplitVarID, SYMBOL, Consequence, CLIN_SIG,
nfe_AF, ubc_AF, cbc_AF, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(nfe_bc_fisher_p)
a <- variants.df %>% filter(crude_trend_direction=="Protective", nfe_bc_fisher_p < 0.05) %>% select(SplitVarID)
# Top "CBC protective" candidates
variants.df %>%
filter(crude_trend_direction=="Protective", ubc_cbc_fisher_p < 0.05) %>%
select(SplitVarID, SYMBOL, Consequence, CLIN_SIG,
nfe_AF, ubc_AF, cbc_AF, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(ubc_cbc_fisher_p)
b <- variants.df %>% filter(crude_trend_direction=="Protective", ubc_cbc_fisher_p < 0.05) %>% select(SplitVarID)
# Top "trend protective" candidates
variants.df %>%
filter(crude_trend_direction=="Protective", prop_trend_p < 0.05) %>%
select(SplitVarID, SYMBOL, Consequence, CLIN_SIG,
nfe_AF, ubc_AF, cbc_AF, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(prop_trend_p)
c <- variants.df %>% filter(crude_trend_direction=="Protective", prop_trend_p < 0.05) %>% select(SplitVarID)
# Intersects
intersect(a,b)
intersect(b,c)
intersect(a,c)
# Clean-up
rm(a,b,c)
# Chunk 13: qq-plots
# nfe_bc_fisher_p
min(variants.df$nfe_bc_fisher_p)
qqunif.plot(variants.df[,"nfe_bc_fisher_p"],
main="NFE vs BC\ncrude counts per variant\nFisher exact test")
qqunif.plot(variants.df[variants.df$SplitVarID!="Var000003110","nfe_bc_fisher_p"],
main="NFE vs BC (excluding one variant in DCHS2)\ncrude counts per variant\nFisher exact test")
# ubc_cbc_fisher_p
min(variants.df$ubc_cbc_fisher_p)
qqunif.plot(variants.df$ubc_cbc_fisher_p,
main="UBC vs CBC\ncrude counts per variant\nFisher exact test")
# prop trend p
min(variants.df$prop_trend_p)
qqunif.plot(variants.df$prop_trend_p,
main="NFE-UBC-CBC\ncrude counts aggregated per gene\nTrend in proportions test")
qqunif.plot(variants.df[variants.df$SplitVarID!="Var000003110","prop_trend_p"],
main="NFE-UBC-CBC (excluding one variant in DCHS2)\ncrude counts per variant\nTrend in proportions test")
# Clean-up
rm(qqunif.plot)
# Histograms of MACs
hist(variants.df$total_AC, labels = TRUE, ylim=c(0,60),
xlab="ACs per variants (bins)", ylab="num of varints")
# Histograms of MACs
hist(variants.df$total_AC, labels = TRUE,
xlab="ACs per variants (bins)", ylab="num of varints")
# Histograms of MACs
hist(variants.df$total_AC, labels = TRUE, ylim=c(0,200),
xlab="ACs per variants (bins)", ylab="num of varints")
mean(genes.df$aggr_ac)
mean(variants.df$aggr_ac)
median(variants.df$aggr_ac)
mean(variants.df$total_AC)
median(variants.df$total_AC)
# Variants with high MACs (non-weighted!)
x <- variants.df %>%
select(SplitVarID, SYMBOL, Consequence, CLIN_SIG, nfe_bc_fisher_p, ubc_cbc_fisher_p,crude_trend_direction) %>%
arrange(desc(total_AC))
# Variants with high MACs (non-weighted!)
x <- variants.df %>%
select(SplitVarID, SYMBOL, Consequence, CLIN_SIG, nfe_bc_fisher_p, ubc_cbc_fisher_p,crude_trend_direction) %>%
arrange(desc("total_AC"))
# Variants with high MACs (non-weighted!)
x <- variants.df %>%
select(SplitVarID, total_AC, SYMBOL, Consequence, CLIN_SIG, nfe_bc_fisher_p, ubc_cbc_fisher_p,crude_trend_direction) %>%
arrange(desc(total_AC))
x[1:10,]
# Variants with high MACs (non-weighted!)
x <- variants.df %>%
select(SplitVarID, total_AC, SYMBOL, Consequence, CLIN_SIG,
nfe_bc_fisher_p, ubc_cbc_fisher_p,crude_trend_direction) %>%
filter(total_AC>10) %>%
arrange(desc(total_AC))
# Variants with high MACs (non-weighted!)
variants.df %>%
select(SplitVarID, total_AC, SYMBOL, Consequence, CLIN_SIG,
nfe_bc_fisher_p, ubc_cbc_fisher_p,crude_trend_direction) %>%
filter(total_AC>10) %>%
arrange(desc(total_AC))
# Variants with high MACs (non-weighted!)
variants.df %>%
select(SplitVarID, total_AF, total_AC, SYMBOL, Consequence, CLIN_SIG,
nfe_bc_fisher_p, ubc_cbc_fisher_p,crude_trend_direction) %>%
filter(total_AC>10) %>%
arrange(desc(total_AC))
rm(x)
ls()
dim(genotypes.mx)
dim(variants.df)
dim(phenotypes.df)
# Check consistency of rownames and colnames
sum(colnames(genotypes.mx) != rownames(phenotypes.df))
sum(rownames(genotypes.mx) != rownames(variants.df))
save.image(paste(base_folder, "s01_get_crude_variants_stats.RData", sep="/"))
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_crude_stats"
opts_knit$set(root.dir = base_folder)
#setwd(base_folder)
# Load libraries
library(dplyr)
# Accessory function
source(paste(base_folder, "f01_qqunif_plot.R", sep="/"))
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_crude_stats"
opts_knit$set(root.dir = base_folder)
#setwd(base_folder)
# Load libraries
library(dplyr)
# Accessory function
source(paste(base_folder, "f01_qqunif_plot.R", sep="/"))
graphics.off()
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
graphics.off()
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_crude_stats"
opts_knit$set(root.dir = base_folder)
#setwd(base_folder)
# Load libraries
library(dplyr)
# Accessory function
source(paste(base_folder, "f01_qqunif_plot.R", sep="/"))
load(paste(base_folder, "s01_crude_variants_stats.RData", sep="/"))
ls()
dim(genotypes.mx)
genotypes.mx[1:5,1:5]
dim(variants.df)
variants.df[1:5,1:5]
dim(phenotypes.df)
phenotypes.df[1:5,1:5]
# Check consistency of rownames and colnames
sum(colnames(genotypes.mx) != rownames(phenotypes.df))
sum(rownames(genotypes.mx) != rownames(variants.df))
# Get list of genes
# (check that there is no NAs; get rid of NAs if they are present!)
genes <- unique(as.character(variants.df$SYMBOL))
length(genes)
sum(is.na(genes))
# Prepare blank matrix for output
header <- c("gene", "num_var", "multiallelic",
"aggr_ac", "aggr_an", "aggr_af",
"aggr_ac_nfe", "aggr_an_nfe", "aggr_af_nfe",
"aggr_ac_bc", "aggr_an_bc", "aggr_af_bc",
"aggr_ac_cbc", "aggr_an_cbc", "aggr_af_cbc",
"aggr_ac_ubc", "aggr_an_ubc", "aggr_af_ubc",
"nfe_bc_fisher_p", "ubc_cbc_fisher_p", "prop_trend_p", "crude_trend_direction")
genes.mx <- matrix(nrow=0, ncol=length(header))
header -> colnames(genes.mx)
# Make logical vectors for the subgroups
table(phenotypes.df$cc)
nfe_cases <- phenotypes.df$cc == -1
bc_cases <- phenotypes.df$cc != -1
ubc_cases <- phenotypes.df$cc == 0
cbc_cases <- phenotypes.df$cc == 1
#genes <- c("EPHB2","SZT2") # for testing
# For each gene
for(gene in genes){
#gene="EPHB2" # 1 var # for testing
#gene="SZT2" # 5 vars # for testing
# Get list of variants
vars <- variants.df$SYMBOL == gene
# Count variants
num_var <- sum(vars)
# Check if any variant is multiallelic
multiallelic <- (any(variants.df[vars, "Multiallelic"]))
# Get genotypes matrices for subgroups
gt.mx <- genotypes.mx[vars, , drop=FALSE]
# drop=FALSE prevents converting data frame to vector for single-variant genes
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/Extract.data.frame.html
gt_nfe.mx <- gt.mx[,nfe_cases, drop=FALSE]
gt_bc.mx <- gt.mx[,bc_cases, drop=FALSE]
gt_cbc.mx <- gt.mx[,cbc_cases, drop=FALSE]
gt_ubc.mx <- gt.mx[,ubc_cases, drop=FALSE]
# Calculate aggregated metrics in sub-groups
aggr_ac <- sum(gt.mx, na.rm=TRUE)
aggr_an <- 2*sum(!is.na(gt.mx))
aggr_af <- aggr_ac / aggr_an
aggr_ac_nfe <- sum(gt_nfe.mx, na.rm=TRUE)
aggr_an_nfe <- 2*sum(!is.na(gt_nfe.mx))
aggr_af_nfe <- aggr_ac_nfe / aggr_an_nfe
aggr_ac_bc <- sum(gt_bc.mx, na.rm=TRUE)
aggr_an_bc <- 2*sum(!is.na(gt_bc.mx))
aggr_af_bc <- aggr_ac_bc / aggr_an_bc
aggr_ac_cbc <- sum(gt_cbc.mx, na.rm=TRUE)
aggr_an_cbc <- 2*sum(!is.na(gt_cbc.mx))
aggr_af_cbc <- aggr_ac_cbc / aggr_an_cbc
aggr_ac_ubc <- sum(gt_ubc.mx, na.rm=TRUE)
aggr_an_ubc <- 2*sum(!is.na(gt_ubc.mx))
aggr_af_ubc <- aggr_ac_ubc / aggr_an_ubc
# Fisher exact test: nfe vs bc
fisher_nfe_bc.mx <- matrix(c(aggr_ac_nfe, aggr_an_nfe - aggr_ac_nfe, aggr_ac_bc, aggr_an_bc - aggr_ac_bc), nrow=2)
nfe_bc_fisher_p <- fisher.test(fisher_nfe_bc.mx)$p.value
# Fisher exact test: cbc vs ubc
fisher_cbc_ubc.mx <- matrix(c(aggr_ac_cbc, aggr_an_cbc - aggr_ac_cbc, aggr_ac_ubc, aggr_an_ubc - aggr_ac_ubc), nrow=2)
cbc_ubc_fisher_p <- fisher.test(fisher_cbc_ubc.mx)$p.value
# Proportions trend test: nfe-ubc-cbc
ac_prop_trend <- c(aggr_ac_nfe, aggr_ac_ubc, aggr_ac_cbc)
an_prop_trend <- c(aggr_an_nfe, aggr_an_ubc, aggr_an_cbc)
prop_trend_p <- prop.trend.test(ac_prop_trend, an_prop_trend)$p.value
# Trend call - to check WHY sum() ?
crude_trend_direction <- "None"
if(sum(aggr_af_nfe) < sum(aggr_af_cbc)) crude_trend_direction <- "Risk"
if(sum(aggr_af_nfe) > sum(aggr_af_cbc)) crude_trend_direction <- "Protective"
result <- c(gene, num_var, multiallelic,
aggr_ac, aggr_an, aggr_af,
aggr_ac_nfe, aggr_an_nfe, aggr_af_nfe,
aggr_ac_bc, aggr_an_bc, aggr_af_bc,
aggr_ac_cbc, aggr_an_cbc, aggr_af_cbc,
aggr_ac_ubc, aggr_an_ubc, aggr_af_ubc,
nfe_bc_fisher_p, cbc_ubc_fisher_p, prop_trend_p, crude_trend_direction)
# Record to result matrix
genes.mx <- rbind(genes.mx, result)
# Clean-up
rm(vars, num_var, multiallelic,
gt.mx, gt_nfe.mx, gt_bc.mx, gt_cbc.mx, gt_ubc.mx,
aggr_ac, aggr_an, aggr_af,
aggr_ac_nfe, aggr_an_nfe, aggr_af_nfe,
aggr_ac_bc, aggr_an_bc, aggr_af_bc,
aggr_ac_cbc, aggr_an_cbc, aggr_af_cbc,
aggr_ac_ubc, aggr_an_ubc, aggr_af_ubc,
fisher_nfe_bc.mx, fisher_cbc_ubc.mx, ac_prop_trend, an_prop_trend,
nfe_bc_fisher_p, cbc_ubc_fisher_p, prop_trend_p, crude_trend_direction, result)
}
# Check result
dim(genes.mx)
# Add rownames
genes -> rownames(genes.mx)
# Clean-up
rm(header, gene, genes,
nfe_cases, bc_cases, ubc_cases, cbc_cases)
genes.df <- as.data.frame(genes.mx, stringsAsFactors = FALSE)
str(genes.df)
genes.df$num_var <- as.integer(genes.df$num_var)
genes.df$multiallelic <- as.logical(genes.df$multiallelic)
genes.df$aggr_ac <-as.integer(genes.df$aggr_ac)
genes.df$aggr_an <-as.integer(genes.df$aggr_an)
genes.df$aggr_af <-as.numeric(genes.df$aggr_af)
genes.df$aggr_ac_nfe <-as.integer(genes.df$aggr_ac_nfe)
genes.df$aggr_an_nfe <-as.integer(genes.df$aggr_an_nfe)
genes.df$aggr_af_nfe <-as.numeric(genes.df$aggr_af_nfe)
genes.df$aggr_ac_bc <-as.integer(genes.df$aggr_ac_bc)
genes.df$aggr_an_bc <-as.integer(genes.df$aggr_an_bc)
genes.df$aggr_af_bc <-as.numeric(genes.df$aggr_af_bc)
genes.df$aggr_ac_cbc <-as.integer(genes.df$aggr_ac_cbc)
genes.df$aggr_an_cbc <-as.integer(genes.df$aggr_an_cbc)
genes.df$aggr_af_cbc <-as.numeric(genes.df$aggr_af_cbc)
genes.df$aggr_ac_ubc <-as.integer(genes.df$aggr_ac_ubc)
genes.df$aggr_an_ubc <-as.integer(genes.df$aggr_an_ubc)
genes.df$aggr_af_ubc <-as.numeric(genes.df$aggr_af_ubc)
genes.df$nfe_bc_fisher_p <-as.numeric(genes.df$nfe_bc_fisher_p)
genes.df$ubc_cbc_fisher_p <-as.numeric(genes.df$ubc_cbc_fisher_p)
genes.df$prop_trend_p <-as.numeric(genes.df$prop_trend_p)
# Check result
str(genes.df)
# Clean-up
rm(genes.mx)
nfe_bc_fisher_fdr <- p.adjust(genes.df$nfe_bc_fisher_p, method="fdr")
min(nfe_bc_fisher_fdr)
ubc_cbc_fisher_fdr <- p.adjust(genes.df$ubc_cbc_fisher_p, method="fdr")
min(ubc_cbc_fisher_fdr)
prop_trend_fdr <- p.adjust(genes.df$prop_trend_p, method="fdr")
min(prop_trend_fdr)
genes.df <- data.frame(genes.df,
nfe_bc_fisher_fdr,
ubc_cbc_fisher_fdr,
prop_trend_fdr)
# Clean-up
rm(nfe_bc_fisher_fdr,ubc_cbc_fisher_fdr,prop_trend_fdr)
# Show genes with multiallelic variants
summary(genes.df$multiallelic) # 2 genes with multiallelic variants
genes.df %>%
filter(multiallelic) %>%
select(gene)
# Look at the genes with significant crude trend
table(genes.df[,"crude_trend_direction"])
genes.df %>%
filter(prop_trend_p <= 0.05) %>%
select(gene, crude_trend_direction)
genes.df[c("ATM","CHEK2","NF1","NRG1","ERCC6"),
c("aggr_af_nfe", "aggr_af_ubc", "aggr_af_cbc", "nfe_bc_fisher_p", "ubc_cbc_fisher_p", "prop_trend_p")]
# Plot different p-values against each other
plot(genes.df$nfe_bc_fisher_p, genes.df$ubc_cbc_fisher_p)
plot(genes.df$nfe_bc_fisher_p, genes.df$prop_trend_p)
plot(genes.df$ubc_cbc_fisher_p, genes.df$prop_trend_p)
genes.df %>%
filter(crude_trend_direction=="Risk", nfe_bc_fisher_p < 0.05) %>%
select(gene, aggr_af_nfe, aggr_af_ubc, aggr_af_cbc, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(nfe_bc_fisher_p)
# Top "BC risk" candidates
genes.df %>%
filter(crude_trend_direction=="Risk", nfe_bc_fisher_p < 0.05) %>%
select(gene, aggr_af_nfe, aggr_af_ubc, aggr_af_cbc, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(nfe_bc_fisher_p)
a <- genes.df %>% filter(crude_trend_direction=="Risk", nfe_bc_fisher_p < 0.05) %>% select(gene)
# Top "CBC risk" candidates
genes.df %>%
filter(crude_trend_direction=="Risk", ubc_cbc_fisher_p < 0.05) %>%
select(gene, aggr_af_nfe, aggr_af_ubc, aggr_af_cbc, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(ubc_cbc_fisher_p)
b <- genes.df %>% filter(crude_trend_direction=="Risk", ubc_cbc_fisher_p < 0.05) %>% select(gene)
# Top "trend risk" candidates
genes.df %>%
filter(crude_trend_direction=="Risk", prop_trend_p < 0.05) %>%
select(gene, aggr_af_nfe, aggr_af_ubc, aggr_af_cbc, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(prop_trend_p)
c <- genes.df %>% filter(crude_trend_direction=="Risk", prop_trend_p < 0.05) %>% select(gene)
# Intersects
intersect(a,b)
intersect(b,c)
intersect(a,c)
# Clean-up
rm(a,b,c)
# Top "BC protective" candidates
genes.df %>%
filter(crude_trend_direction=="Protective", nfe_bc_fisher_p < 0.05) %>%
select(gene, aggr_af_nfe, aggr_af_ubc, aggr_af_cbc, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(nfe_bc_fisher_p)
a <- genes.df %>% filter(crude_trend_direction=="Protective", nfe_bc_fisher_p < 0.05) %>% select(gene)
# Top "CBC protective" candidates
genes.df %>%
filter(crude_trend_direction=="Protective", ubc_cbc_fisher_p < 0.05) %>%
select(gene, aggr_af_nfe, aggr_af_ubc, aggr_af_cbc, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(ubc_cbc_fisher_p)
b <- genes.df %>% filter(crude_trend_direction=="Protective", ubc_cbc_fisher_p < 0.05) %>% select(gene)
# Top "trend protective" candidates
genes.df %>%
filter(crude_trend_direction=="Protective", prop_trend_p < 0.05) %>%
select(gene, aggr_af_nfe, aggr_af_ubc, aggr_af_cbc, nfe_bc_fisher_p, ubc_cbc_fisher_p,
prop_trend_p, nfe_bc_fisher_fdr, ubc_cbc_fisher_fdr, prop_trend_fdr) %>%
arrange(prop_trend_p)
c <- genes.df %>% filter(crude_trend_direction=="Protective", prop_trend_p < 0.05) %>% select(gene)
# DCHS2 and GBGT1 are "Protective" because of the NFE vs WECARE change
# Intersects
intersect(a,b)
intersect(b,c)
intersect(a,c)
# Clean-ups
rm(a,b,c)
# nfe_bc_fisher_p
min(genes.df$nfe_bc_fisher_p)
qqunif.plot(genes.df[,"nfe_bc_fisher_p"],
main="NFE vs BC\ncrude counts aggregated per gene\nFisher exact test")
# ubc_cbc_fisher_p
min(genes.df$ubc_cbc_fisher_p)
qqunif.plot(genes.df$ubc_cbc_fisher_p,
main="UBC vs CBC\ncrude counts aggregated per gene\nFisher exact test")
# prop trend p
min(genes.df$prop_trend_p)
qqunif.plot(genes.df$prop_trend_p,
main="NFE-UBC-CBC\ncrude counts aggregated per gene\nTrend in proportions test")
# Clean-up
rm(qqunif.plot)
# Selected genes: candidates from previous analyses and
# GFRAL was an outlier, because of NFE >> UBC/CBC : likely methodical difference between KGEN and WECARE
genes.df[c("ATM","CHEK2"),
c("aggr_ac", "aggr_ac_nfe", "aggr_ac_bc", "aggr_ac_ubc", "aggr_ac_cbc")]
# Histograms of aggregated MACs
hist(genes.df$aggr_ac, labels = TRUE, ylim=c(0,60),
xlab="aggregated MACs per gene (bins)", ylab="num of genes")
# Histograms of aggregated MACs
hist(genes.df$aggr_ac, labels = TRUE, ylim=c(0,65),
xlab="aggregated MACs per gene (bins)", ylab="num of genes")
hist(genes.df$aggr_ac[genes.df$aggr_ac<26], breaks=0:25,
labels = TRUE, ylim=c(0,20), main="zoom to MAC < 25",
xlab="aggregated MACs per gene", ylab="num of genes")
mean(genes.df$aggr_ac)
median(genes.df$aggr_ac)
# Genes with high MACs (non-weighted!)
x <- genes.df %>%
select(gene, num_var, multiallelic, aggr_ac, nfe_bc_fisher_p, ubc_cbc_fisher_p,crude_trend_direction) %>%
arrange(desc(aggr_ac))
x[1:10,]
# Aggregated counts < 10 - too rare for stat analysis ??
sum(genes.df$aggr_ac < 10)
# Genes that may be analysed
sum(genes.df$aggr_ac >= 10)
# clean-up
rm(x)
ls()
dim(genotypes.mx)
dim(variants.df)
dim(phenotypes.df)
dim(genes.df)
# Check consistency of rownames and colnames
sum(colnames(genotypes.mx) != rownames(phenotypes.df))
sum(rownames(genotypes.mx) != rownames(variants.df))
save.image(paste(base_folder, "s02_crude_genes_stats.RData", sep="/"))
