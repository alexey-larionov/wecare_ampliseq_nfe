c <- genes.df %>% filter(crude_trend_direction=="Protective", prop_trend_p < 0.05) %>% select(gene)
# DCHS2 and GBGT1 are "Protective" because of the NFE vs WECARE change
# Intersects
intersect(a,b)
intersect(b,c)
intersect(a,c)
# Clean-ups
rm(a,b,c)
# nfe_bc_fisher_p
min(genes.df$nfe_bc_fisher_p)
p_obs <- genes.df$nfe_bc_fisher_p
p_exp <- ppoints(p_obs)
cptn="NFE vs BC\ncrude counts aggregated per gene\nFisher exact test"
qqunif.plot(p_obs, main=cptn)
estlambda2(p.o=p_obs, p.e=p_exp, plot=T, main=cptn)
estlambda2(p.o=p_obs, p.e=p_exp, plot=T, main=cptn, legend="topleft")
?plot.window
dbeta(0.1,1,25)
dbeta(0.1,1,25)
dbeta(0.5,1,25)
dbeta(0.05,1,25)
dbeta(0.00001,1,25)
dbeta(0.2,1,25)
dbeta(0.12,1,25)
dbeta(0.13,1,25)
dbeta(0.125,1,25)
dbeta(0.9,1,25)
dbeta(0.99,1,25)
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_polr"
opts_knit$set(root.dir = base_folder)
#setwd(base_folder)
# Load libraries
library(dplyr)
?skat
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_polr"
opts_knit$set(root.dir = base_folder)
#setwd(base_folder)
# Load libraries
library(dplyr)
library(SKAT)
?QQPlot_Adj
QQPlot_Adj
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_polr"
opts_knit$set(root.dir = base_folder)
#setwd(base_folder)
# Load libraries
library(dplyr)
source_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s16_crude_stats"
load(paste(source_folder, "s02_crude_genes_stats.RData", sep="/"))
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_polr"
rm(source_folder)
ls()
dim(genotypes.mx)
dim(variants.df)
dim(phenotypes.df)
dim(genes.df)
# Check consistency of rownames and colnames
sum(colnames(genotypes.mx) != rownames(phenotypes.df))
sum(rownames(genotypes.mx) != rownames(variants.df))
# Prepare matrix for output
genotypes_imp.mx <- genotypes.mx
# Check AFs
max(variants.df$total_AF)
# Prepare matrix for output
genotypes_imp.mx <- genotypes.mx
# Fraction of missed data
sum(is.na(genotypes_imp.mx))/
(nrow(genotypes_imp.mx)*ncol(genotypes_imp.mx)) # ~3.6%
# Impute missed data
for(var in 1:nrow(genotypes_imp.mx)){
# Get AF
af <- variants.df[var,"total_AF"]
# Impute missed genotypes
genotypes <- genotypes_imp.mx[var,]
2*af -> genotypes[is.na(genotypes)]
genotypes -> genotypes_imp.mx[var,]
# Clean-up
rm(af, genotypes)
}
# Check the result
sum(is.na(genotypes_imp.mx)) # 0
# Clean-up
rm(var)
# Prepare tables for output
variants.df <- data.frame(variants.df, weight=NA)
genotypes_imp_wt.mx <- genotypes_imp.mx
# Apply weighting
for(var in 1:nrow(genotypes_imp_wt.mx)){
# Calculate weight
weight <- dbeta(variants.df[var, "total_AF"], 1, 25)
# Write weight to variants table
weight -> variants.df[var,"weight"]
# Apply weights to genotypes table
weight * genotypes_imp.mx[var,] -> genotypes_imp_wt.mx[var,]
# Clean-up
rm(weight)
}
# Explore weights
sum(is.na(variants.df$weight))
mean(variants.df$weight)
hist(variants.df$weight, lab=T, ylim=c(0,160))
# Explore weighted genotypes
min(genotypes_imp_wt.mx)
max(genotypes_imp_wt.mx)
hist(genotypes_imp_wt.mx)
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0])
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0.5])
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>25])
hist(genotypes_imp_wt.mx, lab=T)
hist(genotypes_imp_wt.mx, lab=T, ylim=c(0,10e5))
hist(genotypes_imp_wt.mx, lab=T, ylim=c(0,10e4))
hist(genotypes_imp_wt.mx, lab=T, ylim=c(0,5e5))
hist(genotypes_imp_wt.mx, lab=T, ylim=c(0,2e5))
hist(genotypes_imp_wt.mx, lab=T, ylim=c(0,1.2e5))
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0])
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0]lab=T, ylim=c(0,4e3))
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0], lab=T, ylim=c(0,4e3))
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0], lab=T, ylim=c(0,4.5e3))
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0.5])
min(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0])
hist(genotypes_imp.mx)
hist(genotypes_imp.mx, lab=T, ylim=c(0,5e5))
hist(genotypes_imp.mx, lab=T, ylim=c(0,1.3e5))
hist(genotypes_imp.mx[genotypes_imp.mx>0], lab=T, ylim=c(0,4e3))
hist(genotypes_imp.mx[genotypes_imp.mx>0], lab=T, ylim=c(0,4.5e3))
# Fraction of missed data
sum(is.na(genotypes_imp.mx))
# Fraction of missed data
sum(is.na(genotypes.mx))
sum(is.na(genotypes.mx))/
(nrow(genotypes.mx)*ncol(genotypes.mx)) # ~3.6%
# Chunk 1: set_width
#eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_polr"
opts_knit$set(root.dir = base_folder)
#setwd(base_folder)
# Load libraries
library(dplyr)
# Chunk 3: load_data
source_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s16_crude_stats"
load(paste(source_folder, "s02_crude_genes_stats.RData", sep="/"))
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_polr"
rm(source_folder)
# Chunk 4: check_data
ls()
dim(genotypes.mx)
dim(variants.df)
dim(phenotypes.df)
dim(genes.df)
# Check consistency of rownames and colnames
sum(colnames(genotypes.mx) != rownames(phenotypes.df))
sum(rownames(genotypes.mx) != rownames(variants.df))
# Chunk 5: impute_missed_data
# Check AFs
max(variants.df$total_AF)
# Prepare matrix for output
genotypes_imp.mx <- genotypes.mx
# Fraction of missed data
sum(is.na(genotypes.mx))
sum(is.na(genotypes.mx))/
(nrow(genotypes.mx)*ncol(genotypes.mx)) # ~3.6%
# Impute missed data
for(var in 1:nrow(genotypes_imp.mx)){
# Get AF
af <- variants.df[var,"total_AF"]
# Impute missed genotypes
genotypes <- genotypes_imp.mx[var,]
2*af -> genotypes[is.na(genotypes)]
genotypes -> genotypes_imp.mx[var,]
# Clean-up
rm(af, genotypes)
}
# Check the result
sum(is.na(genotypes_imp.mx)) # 0
hist(genotypes_imp.mx, lab=T, ylim=c(0,1.3e5))
hist(genotypes_imp.mx[genotypes_imp.mx>0], lab=T, ylim=c(0,4.5e3))
# Clean-up
rm(var)
# Chunk 6: weight_variants_by_af
# Prepare tables for output
variants.df <- data.frame(variants.df, weight=NA)
genotypes_imp_wt.mx <- genotypes_imp.mx
# Apply weighting
for(var in 1:nrow(genotypes_imp_wt.mx)){
# Calculate weight
weight <- dbeta(variants.df[var, "total_AF"], 1, 25)
# Write weight to variants table
weight -> variants.df[var,"weight"]
# Apply weights to genotypes table
weight * genotypes_imp.mx[var,] -> genotypes_imp_wt.mx[var,]
# Clean-up
rm(weight)
}
# Explore weights
sum(is.na(variants.df$weight))
mean(variants.df$weight)
hist(variants.df$weight, lab=T, ylim=c(0,160))
# Explore weighted genotypes
min(genotypes_imp_wt.mx)
max(genotypes_imp_wt.mx)
hist(genotypes_imp_wt.mx, lab=T, ylim=c(0,1.2e5))
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0], lab=T, ylim=c(0,4.5e3))
min(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0])
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0.5])
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>25])
# clean-up
rm(var, genotypes_imp.mx)
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0.5], lab=T, ylim=c(0,3e2))
# Chunk 1: set_width
#eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_polr"
opts_knit$set(root.dir = base_folder)
#setwd(base_folder)
# Load libraries
library(dplyr)
# Chunk 3: load_data
source_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s16_crude_stats"
load(paste(source_folder, "s02_crude_genes_stats.RData", sep="/"))
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_polr"
rm(source_folder)
# Chunk 4: check_data
ls()
dim(genotypes.mx)
dim(variants.df)
dim(phenotypes.df)
dim(genes.df)
# Check consistency of rownames and colnames
sum(colnames(genotypes.mx) != rownames(phenotypes.df))
sum(rownames(genotypes.mx) != rownames(variants.df))
# Chunk 5: impute_missed_data
# Check AFs
max(variants.df$total_AF)
# Prepare matrix for output
genotypes_imp.mx <- genotypes.mx
# Fraction of missed data
sum(is.na(genotypes.mx))
sum(is.na(genotypes.mx))/
(nrow(genotypes.mx)*ncol(genotypes.mx)) # ~3.6%
# Impute missed data
for(var in 1:nrow(genotypes_imp.mx)){
# Get AF
af <- variants.df[var,"total_AF"]
# Impute missed genotypes
genotypes <- genotypes_imp.mx[var,]
2*af -> genotypes[is.na(genotypes)]
genotypes -> genotypes_imp.mx[var,]
# Clean-up
rm(af, genotypes)
}
# Check the result
sum(is.na(genotypes_imp.mx)) # 0
hist(genotypes_imp.mx, lab=T, ylim=c(0,1.3e5))
hist(genotypes_imp.mx[genotypes_imp.mx>0], lab=T, ylim=c(0,4.5e3))
# Clean-up
rm(var)
# Chunk 6: weight_variants_by_af
# Prepare tables for output
variants.df <- data.frame(variants.df, weight=NA)
genotypes_imp_wt.mx <- genotypes_imp.mx
# Apply weighting
for(var in 1:nrow(genotypes_imp_wt.mx)){
# Calculate weight
weight <- dbeta(variants.df[var, "total_AF"], 1, 25)
# Write weight to variants table
weight -> variants.df[var,"weight"]
# Apply weights to genotypes table
weight * genotypes_imp.mx[var,] -> genotypes_imp_wt.mx[var,]
# Clean-up
rm(weight)
}
# Explore weights
sum(is.na(variants.df$weight))
mean(variants.df$weight)
hist(variants.df$weight, lab=T, ylim=c(0,160))
# Explore weighted genotypes
min(genotypes_imp_wt.mx)
max(genotypes_imp_wt.mx)
hist(genotypes_imp_wt.mx, lab=T, ylim=c(0,1.2e5))
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0], lab=T, ylim=c(0,4.5e3))
hist(genotypes_imp_wt.mx[genotypes_imp_wt.mx>0.5], lab=T, ylim=c(0,3e2))
# clean-up
rm(var, genotypes_imp.mx)
for(gene in genes){
#gene="ATM"
# Get list of variants
vars <- variants.df$SYMBOL == gene
# Get genotypes matrix
gt.mx <- genotypes_imp_wt.mx[vars, , drop=FALSE]
# Aggregate in "burden" style (no NAs is expected after imputation)
aggr_gene <- apply(gt.mx, 2, sum)
# Add to results matrix
genes_data.mx <- rbind(genes_data.mx, aggr_gene)
# In-loop clean-up
rm(vars, gt.mx, aggr_gene)
}
# Add rownames
genes -> rownames(genes_data.mx)
# Get list of genes (there should be no NAs !)
genes <- unique(as.character(variants.df$SYMBOL))
length(genes)
sum(is.na(genes))
# Prepare results matrix
genes_data.mx <- matrix(nrow=0, ncol=ncol(genotypes_imp_wt.mx))
colnames(genes_data.mx) <- colnames(genotypes_imp_wt.mx)
for(gene in genes){
#gene="ATM"
# Get list of variants
vars <- variants.df$SYMBOL == gene
# Get genotypes matrix
gt.mx <- genotypes_imp_wt.mx[vars, , drop=FALSE]
# Aggregate in "burden" style (no NAs is expected after imputation)
aggr_gene <- apply(gt.mx, 2, sum)
# Add to results matrix
genes_data.mx <- rbind(genes_data.mx, aggr_gene)
# In-loop clean-up
rm(vars, gt.mx, aggr_gene)
}
# Add rownames
genes -> rownames(genes_data.mx)
# Check result
dim(genes_data.mx)
genes_data.mx[1:5,1:5]
sum(is.na(genes_data.mx))
# Explore result
min(genes_data.mx)
max(genes_data.mx)
x <- as.vector(genes_data.mx)
x[order(x, decreasing = TRUE)][1:25]
# Samples with high weighted genotypes
for(ind in which(genes_data.mx > 40)){
cat(genes_data.mx[ind]," - ")
col=ceiling(ind / nrow(genes_data.mx))
row=which(genes_data.mx[,col]>40)
genes_data.mx[row,col]
cat(rownames(genes_data.mx)[row]," - ")
cat(colnames(genes_data.mx)[col],"\n")
rm(col, row)
}
hist(genes_data.mx[genes.df$gene=="SETX",])
hist(genes_data.mx[genes.df$gene=="SETX",], lab=T, ylim=c(0,7e2))
phenotypes.df[c("102_S466_L008","142_S501_L008"),
c("cc")]
#
hist(genes_data.mx)
#
hist(genes_data.mx, lab=T, ylim=c(0,4.5e4))
hist(genes_data.mx[genes_data.mx > 1 & genes_data.mx < 40])
hist(genes_data.mx[genes_data.mx > 25 & genes_data.mx < 40])
hist(genes_data.mx[genes_data.mx > 1 & genes_data.mx < 40],
lab=T, ylim=c(0,2.5e2))
hist(genes_data.mx[genes_data.mx > 1 & genes_data.mx < 40],
lab=T, ylim=c(0,3e2))
# Clean-up
rm(gene, genes, x, ind)
# Rename genes.df
genes_info.df <- genes.df
rm(genes.df)
ls()
dim(genotypes.mx)
dim(genotypes_imp_wt.mx)
dim(genes_data.mx)
dim(genes_info.df)
dim(variants.df)
dim(phenotypes.df)
# Check consistency of rownames and colnames
sum(colnames(genotypes.mx) != rownames(phenotypes.df))
sum(colnames(genes_data.mx) != rownames(phenotypes.df))
sum(rownames(genes_info.df) != rownames(genes_data.mx))
sum(rownames(genotypes.mx) != rownames(genotypes_imp_wt.mx))
sum(rownames(genotypes.mx) != rownames(variants.df))
save.image(paste(base_folder, "s01_impute_weight_aggregate.RData", sep="/"))
run_func <- function(func, ...){
func(...)
}
run_func(sum, 1,2,3)
run_func(min, 1,2,3)
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
graphics.off()
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_polr"
opts_knit$set(root.dir = base_folder)
#setwd(base_folder)
# Libraries
library(MASS) # for proportional odds regression (polr)
library(dplyr)
library(QQperm)
# Accessory functions
source(paste(base_folder, "f01_tryCatchAdv.R", sep="/"))
source(paste(base_folder, "f02_qqunif_plot.R", sep="/"))
load(paste(base_folder, "s01_impute_weight_aggregate.RData", sep="/"))
ls()
ls()
dim(genotypes.mx)
dim(genotypes_imp_wt.mx)
dim(genes_data.mx)
dim(genes_info.df)
dim(variants.df)
dim(phenotypes.df)
# Check consistency of rownames and colnames
sum(colnames(genotypes.mx) != rownames(phenotypes.df))
sum(colnames(genes_data.mx) != rownames(phenotypes.df))
sum(rownames(genes_info.df) != rownames(genes_data.mx))
sum(rownames(genotypes.mx) != rownames(genotypes_imp_wt.mx))
sum(rownames(genotypes.mx) != rownames(variants.df))
# Eigenvectors
E <- as.matrix(phenotypes.df[,c("PC1", "PC2")])
str(E)
E[1:5,]
sum(is.na(E)) # 0
# Outcomes
table(phenotypes.df$group)
table(phenotypes.df$cc)
Y <- phenotypes.df$cc + 2 # shift [-1,0,1] to [1,2,3] - natural numbers may better fit to ordered factors later
table(Y)
?ordered
ordered(4:1)
# Chunk 1: set_width
#eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
graphics.off()
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s17_polr"
opts_knit$set(root.dir = base_folder)
#setwd(base_folder)
# Libraries
library(MASS) # for proportional odds regression (polr)
library(dplyr)
library(QQperm)
# Accessory functions
source(paste(base_folder, "f01_tryCatchAdv.R", sep="/"))
source(paste(base_folder, "f02_qqunif_plot.R", sep="/"))
# Chunk 3: load_data
load(paste(base_folder, "s01_impute_weight_aggregate.RData", sep="/"))
# Chunk 4: check_data
ls()
dim(genotypes.mx)
dim(genotypes_imp_wt.mx)
dim(genes_data.mx)
dim(genes_info.df)
dim(variants.df)
dim(phenotypes.df)
# Check consistency of rownames and colnames
sum(colnames(genotypes.mx) != rownames(phenotypes.df))
sum(colnames(genes_data.mx) != rownames(phenotypes.df))
sum(rownames(genes_info.df) != rownames(genes_data.mx))
sum(rownames(genotypes.mx) != rownames(genotypes_imp_wt.mx))
sum(rownames(genotypes.mx) != rownames(variants.df))
# Eigenvectors
E <- as.matrix(phenotypes.df[,c("PC1", "PC2")])
E[1:5,]
sum(is.na(E)) # 0
# Outcomes
table(phenotypes.df$group)
table(phenotypes.df$cc)
Y <- phenotypes.df$cc + 2 # shift [-1,0,1] to [1,2,3] - natural numbers may better fit to ordered factors later
table(Y)
?is.ordered
# Outcomes
table(phenotypes.df$group)
table(phenotypes.df$cc)
Y <- phenotypes.df$cc + 2 # shift [-1,0,1] to [1,2,3] - natural numbers may better fit to ordered factors later
table(Y)
Y <- ordered(Y, levels=c(1,2,3), labels=c("nfe", "ubc", "cbc")) # convert to ordered factor
names(Y) <- as.vector(phenotypes.df$sample_id) # add names (just in case)
str(Y)
